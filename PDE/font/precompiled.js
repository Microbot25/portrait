// this code was autogenerated from PJS
var sketchProc = function($p) {
    var Orb = (function() {
        function Orb() {
            var $this_1 = this;

            function $superCstr() {
                $p.extendClassChain($this_1)
            }
            $this_1.x = 0;
            $this_1.y = 0;
            $this_1.sz = 0;
            $this_1.px = 0;
            $this_1.py = 0;
            $this_1.offSet = 0;
            $this_1.radius = 0;
            $this_1.dir = 0;
            $this_1.currentOrb = 0;
            $this_1.col = 0x00000000;

            function run$0() {
                $this_1.$self.update();
                $this_1.$self.showLines();
            }
            $p.addMethod($this_1, 'run', run$0, false);

            function update$0() {
                var vari = $p.map($p.sin(theta + $this_1.offSet), -1, 1, -2, -2);
                $this_1.px = $p.map($p.cos(theta + $this_1.offSet), -1, 1, edge, $p.width - edge);
                $this_1.py = $this_1.y + $p.sin(theta * $this_1.dir) * $this_1.radius * vari;
            }
            $p.addMethod($this_1, 'update', update$0, false);

            function showLines$0() {
                for (var i = 0; i < orbs.length; i++) {
                    $this_1.currentOrb = i;
                    var distance = $p.dist($this_1.px, $this_1.py, orbs[i].px, orbs[i].py);
                    if (distance > 0 && distance < 110) {
                        $p.stroke(20, 30);
                        $p.strokeWeight(2);
                        $p.line($this_1.px, $this_1.py, orbs[i].px, orbs[i].py);
                        $p.fill(0, $p.random(255), 0);
                        $p.strokeWeight(5);
                        $p.ellipse(orbs[i].px, orbs[i].py, 2, 2);
                    }
                }
            }
            $p.addMethod($this_1, 'showLines', showLines$0, false);

            function $constr_3(_x, _y, _sz) {
                $superCstr();

                $this_1.x = _x;
                $this_1.y = _y;
                $this_1.sz = _sz;
                $this_1.offSet = $p.random($p.TWO_PI);
                $this_1.radius = $p.random(5, 10);
                $this_1.dir = $p.random(1) > .25 ? 1 : -10;
            }

            function $constr() {
                if (arguments.length === 3) {
                    $constr_3.apply($this_1, arguments);
                } else $superCstr();
            }
            $constr.apply(null, arguments);
        }
        return Orb;
    })();
    $p.Orb = Orb;

    var num = 300,
        frames = 330,
        edge = 70;

    var orbs = $p.createJavaArray('Orb', [num]);
    var theta = 0;

    function setup() {
        $p.size(1280, 720);
        for (var i = 0; i < num; i++) {
            var d = 150;
            var x = $p.random($p.width);
            var y = edge + ($p.height - 2 * edge) / $p.parseFloat(num) * i;
            orbs[i] = new Orb($p.noise(x), y, $p.random(5, -10));
        }
    }
    $p.setup = setup;
    setup = setup.bind($p);

    function draw() {
        $p.background(255);
        for (var i = 0; i < orbs.length; i++) {
            orbs[i].run();
        }
        theta += $p.TWO_PI / frames;
    }
    $p.draw = draw;
    draw = draw.bind($p);

};
var canvas = document.getElementById("mysketch");
var p = new Processing(canvas, sketchProc);
